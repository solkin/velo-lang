var a = list(10, {2+2}, "hello").ext(
    func copy() {
        it
    }
).ext(
    func copy1() {
        it
    }
).ext(
    func copy2() {
        it
    }
).ext(
    func copy3() {
        it
    }
).ext(
    func copy4() {
        it
    }
);

# a[2] = "2";
var z = func(t, y) {
    19 + 2 + t - y;
};

println("hello".len);
println("hello".hash);
println("hello".sub(1, 3));

println(a.len);
println(z(5+1, 6));

if (a[2] == "hello") {
    println(a[1]);
    println(a.sub(1, a.len)[1]);
};

var m = a.copy().copy1().copy2().copy3().copy4().copy3().copy2().copy1().copy().map(
    func(t) {
        "'" + t + "'";
    }
);
println(m[0]);
println(
    m.reduce(
        func(acc, item) {
            acc + ", " + item
        }
    )
);

var redef = 9;
var s = subject("string");
println("simply get value: " + s.get);
var obs1 = s.observe(
    func(v) {
        var redef = redef + 1;
        {
            var redef = redef + 1;
            println("redef: " + redef); #11
            println("observe1: " + v);
        }
    }
);
var obs2 = s.observe(
    func(v) {
        println("observe2: " + v);
    }
);
s.set("changed string");
s.detach(obs1);
s.set("double changed string");
s.notify();

a = a + 3 + list(14, "new");
a = a.plus("qwe", "rty", list("one"));
a = a.ext(
    func string() {
        it.reduce(
            func(acc, item) {
                acc + ", " + item
            }
        )
    }
);
println(a.string);

println(a.notExist + 1);

s = struct(
    first = "First Value",
    second = true,
    third = a
);
println(s.first + "; " + s.second);

var tr = tree("a".to("b"), "c".to(s), "d".to(2+5*9));
# tbl = table("col1", "col2", "col3");
println(
    tr.reduce(
        func (acc, entry) {
            (acc.first + ";" + entry.first).to(acc.second + ";" + entry.second)
        }
    )
);

var notLetA = 9;
let (letA = 4, letB = 8) {
    println(notLetA);
    println(letA);
    println(letB);
};
println(notLetA);