func[int] test = func(int a) int {
    func(int a, int b) int {
        a + b
    }(a, 1);
};

func traverse(array[array[int]] matrix) array[array[int]] {
    native class Terminal() {
        native func print(str text) str;
        func println(str text) str { print(text.con("\n")) };
    };
    matrix.map(
        func(int index, array[int] row) array[int] {
            any term = new Terminal();
            row.map(
                func(int index, int col) int {
                    int v = test(col);
                    term.print(v.str);
                    term.print(" ");
                    v;
                }
            );
            term.println("");
            row;
        }
    );
};

func intToString(int num, int radix) str {
    int MIN_RADIX = 2;
    int MAX_RADIX = 36;
    array[byte] digits = arrayOf[byte] (
        '0' , '1' , '2' , '3' , '4' , '5' ,
        '6' , '7' , '8' , '9' , 'a' , 'b' ,
        'c' , 'd' , 'e' , 'f' , 'g' , 'h' ,
        'i' , 'j' , 'k' , 'l' , 'm' , 'n' ,
        'o' , 'p' , 'q' , 'r' , 's' , 't' ,
        'u' , 'v' , 'w' , 'x' , 'y' , 'z'
    );
    if (radix < MIN_RADIX | radix > MAX_RADIX) then radix = 10;

    # For negative numbers, print out the absolute value w/ a leading '-'.
    # Use an array large enough for a binary number.
    array[byte] buffer = arrayOf[byte](33);
    int i = 33;
    bool isNeg = false;
    if (num < 0) {
        isNeg = true;
        num = 0 - num;

        # When the value is MIN_VALUE, it overflows when made positive
        if (num < 0) {
            i = i - 1;
            buffer[i] = digits[0 - (num + radix) % radix];
            num = 0 - (num / radix);
        };
    };

    while (num > 0) {
        i = i - 1;
        buffer[i] = digits[num % radix];
        num = num / radix;
    };

    if (isNeg) {
        i = i - 1;
        buffer[i] = '-';
    };

    # Package constructor avoids an array copy.
    #new String(buffer, i, 33 - i, true);
    ""
};

any matrix = arrayOf[array[int]](
    arrayOf[int](0, 4, 6, 3, 5),
    arrayOf[int](8, 4, 2, 5, 1)
);
matrix = matrix.con(arrayOf[array[int]](arrayOf[int](2, 1, 3, 7).plus(8)));

traverse(matrix);
