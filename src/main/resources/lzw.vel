include "lang/terminal.vel";

class LZW() {
    func compress(str text) array[int] {
        dict[str:int] dictionary = new dict[str:int]{};
        int dictSize = 0;
        while(dictSize < 256) {
            dictionary[dictSize.char] = dictSize;
            dictSize = dictSize + 1;
        };

        str w = "";
        array[int] result = new array[int](0);
        int i = 0;
        while(i < text.len) {
            int c = text[i];
            str wc = w.con(c.char);
            if (dictionary.key(wc)) {
                w = wc;
            } else {
                result = result.plus(dictionary[w]);
                # Add wc to the dictionary.
                dictionary[wc] = dictSize;
                dictSize = dictSize + 1;
                w = c.char;
            };
            i = i + 1;
        };

        if (w != "") then result = result.plus(dictionary[w]);

        result;
    };

    func decompress(array[int] compressed) str {
        str result = "";
        if (compressed.len > 0) {
            dict[int:str] dictionary = new dict[int:str]{};
            int dictSize = 0;
            while(dictSize < 256) {
                dictionary[dictSize] = dictSize.char;
                dictSize = dictSize + 1;
            };
            str w = compressed[0].char;
            result = w;
            int i = 1;
            while (i < compressed.len) {
                int k = compressed[i];
                str entry = "";
                if (dictionary.key(k)) {
                    entry = dictionary[k];
                } else if (k == dictSize) {
                    entry = w + w[0].char;
                } else {
                    term.println("Bad compressed k: ".con(k));
                };

                result = result.con(entry);

                # Add w+entry[0] to the dictionary.
                dictionary[dictSize] = w.con(entry[0].char);
                dictSize = dictSize + 1;

                w = entry;

                i = i + 1;
            };
        };
        result;
    };
};

LZW lzw = new LZW();
str text = term.input();
if (text.len == 0) {
    text = "TOBEORNOTTOBEORTOBEORNOT";
    term.println(text);
};
any result = lzw.compress(text);
int i = 0;
str bytes = "";
str chars = "";
while(i < result.len) {
    bytes = bytes.con(result[i].str.con(" "));
    chars = chars.con(result[i].char);
    i = i + 1;
};
term.println(chars.con(" / ").con(bytes));

text = lzw.decompress(result);
term.println(text);
