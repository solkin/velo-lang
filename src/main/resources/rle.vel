native class Terminal() {
    native func print(str text) str;
    func println(str text) str { print(text.con("\n")) };
};

any term = Terminal();

func symbolAt(str s, int i) str {
    s.sub(i, i + 1);
};

func getRLE(str s) str {
    if (s.len > 0) {
        str currentChar = s.sub(0, 1);
        int currentCharCount = 1;
        str sb = "";
        int i = 1;
        while (i <= s.len) {
            str c = if i < s.len then s.sub(i, i + 1) else "0";
            if (i == s.len || currentCharCount == 9 || c != currentChar) {
                sb = sb.con(currentChar);
                if (currentCharCount > 1) {
                    sb = sb.con(currentCharCount.str);
                };
                currentCharCount = 1;
                currentChar = c;
            } else {
                currentCharCount = currentCharCount + 1;
            };
            i = i + 1;
        };
        s = sb;
    };
    s;
};

func isNumber(str v) bool {
    v == "0" || v == "1" || v == "2" || v == "3" || v == "4" || v == "5" || v == "6" || v == "7" || v == "8" || v == "9"
};

func multiplyStr(str s, int count) str {
    int i = 0;
    str out = "";
    while (i < count) {
        out = out.con(s);
        i = i + 1;
    };
    out
};

func unRLE(str s) str {
    int i = 0;
    str out = "";
    str p = "";
    while (i < s.len) {
        str c = s.sub(i, i + 1);
        out = out.con(
            if (isNumber(c)) {
                multiplyStr(p, c.int - 1)
            } else {
                c
            }
        );
        p = c;
        i = i + 1;
    };
    out;
};

term.println(getRLE("Hhhhhhhhhhhhhheeeellooooo")); # Hh9h4e4l2o5
term.println(unRLE("Hh9h4e4l2o5")); # Hhhhhhhhhhhhhheeeellooooo